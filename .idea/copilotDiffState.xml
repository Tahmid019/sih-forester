<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/DATA_MIGRATION_SUMMARY.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DATA_MIGRATION_SUMMARY.md" />
              <option name="updatedContent" value="# Data Migration Summary&#10;&#10;## Extracted Hardcoded Data&#10;&#10;All hardcoded data from the React components has been successfully extracted and exported to JSON files:&#10;&#10;### 1. Navigation Data (`/src/data/navigation.json`)&#10;- Header navigation items (Overview, Monitoring, Alerts, Analytics)&#10;- Icon mappings for each navigation item&#10;&#10;### 2. User Profile Data (`/src/data/user.json`)&#10;- User information (Forest Ranger)&#10;- Application branding (Forester app name and description)&#10;- Avatar and logo styling configurations&#10;&#10;### 3. Sensor Data (`/src/data/sensors.json`)&#10;- 4 monitoring sensors with coordinates, types, values, and status&#10;- Sensor type definitions with icons and units&#10;- Temperature, humidity, air quality, and wind speed sensors&#10;&#10;### 4. Forest Data (`/src/data/forests.json`)&#10;- 4 national forests with boundaries, areas, and health status&#10;- Yellowstone, Olympic, Sequoia, and Redwood national forests&#10;- Geographic boundary coordinates for map rendering&#10;&#10;### 5. Alert Data (`/src/data/alerts.json`)&#10;- Active alerts with locations, severity levels, and messages&#10;- Alert type definitions and classifications&#10;- Fire risk, deforestation, and pest activity alerts&#10;&#10;### 6. Analytics Data (`/src/data/analytics.json`)&#10;- Analytics zones for visualization on maps&#10;- Growth rate zones and monitoring areas&#10;- Zone-specific metrics and descriptions&#10;&#10;### 7. Statistics Data (`/src/data/stats.json`)&#10;- Overview, monitoring, alerts, and analytics statistics&#10;- Performance metrics and health scores&#10;&#10;## Components Updated&#10;&#10;### 1. `InteractiveMap.tsx`&#10;- Now imports sensor, alert, forest, and analytics data from JSON files&#10;- Removed hardcoded arrays for sensors, alerts, and forest boundaries&#10;- Uses dynamic data rendering for all map elements&#10;&#10;### 2. `Header.tsx`&#10;- Imports navigation items from navigation.json&#10;- Uses user and app data from user.json&#10;- Dynamic icon rendering based on JSON configuration&#10;&#10;### 3. `Sidebar.tsx`&#10;- **STATS OVERLAY FUNCTIONALITY COMPLETELY REMOVED**&#10;- Now only displays forest selection interface&#10;- Uses forest data from forests.json&#10;- Clean, streamlined interface without statistics&#10;&#10;### 4. `page.tsx` (Main Dashboard)&#10;- **REMOVED StatsOverlay component import and rendering**&#10;- Simplified layout focusing on map and forest selection&#10;&#10;## Stats Overlay Removal&#10;&#10;The stats overlay functionality has been completely removed from:&#10;- Main dashboard page (no StatsOverlay component)&#10;- Sidebar component (no stats display)&#10;- All associated statistics rendering logic&#10;&#10;The application now has a clean, data-driven architecture with all hardcoded values externalized to JSON files, making it easy to modify data without touching the component code." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { Sidebar } from '@/components/Sidebar';&#10;import { MapView } from '@/components/MapView';&#10;import { Header } from '@/components/Header';&#10;import { StatsOverlay } from '@/components/StatsOverlay';&#10;&#10;export default function Dashboard() {&#10;  const [selectedForest, setSelectedForest] = useState&lt;string | null&gt;(null);&#10;  const [activeView, setActiveView] = useState&lt;'overview' | 'monitoring' | 'alerts' | 'analytics'&gt;('overview');&#10;&#10;  return (&#10;    &lt;div className=&quot;h-screen bg-gray-50 flex flex-col&quot;&gt;&#10;      &lt;Header activeView={activeView} setActiveView={setActiveView} /&gt;&#10;&#10;      &lt;div className=&quot;flex flex-1 overflow-hidden&quot;&gt;&#10;        &lt;Sidebar&#10;          selectedForest={selectedForest}&#10;          setSelectedForest={setSelectedForest}&#10;          activeView={activeView}&#10;        /&gt;&#10;&#10;        &lt;main className=&quot;flex-1 relative&quot;&gt;&#10;          &lt;MapView selectedForest={selectedForest} activeView={activeView} /&gt;&#10;          &lt;StatsOverlay activeView={activeView} /&gt;&#10;        &lt;/main&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { Sidebar } from '@/components/Sidebar';&#10;import { MapView } from '@/components/MapView';&#10;import { Header } from '@/components/Header';&#10;&#10;export default function Dashboard() {&#10;  const [selectedForest, setSelectedForest] = useState&lt;string | null&gt;(null);&#10;  const [activeView, setActiveView] = useState&lt;'overview' | 'monitoring' | 'alerts' | 'analytics'&gt;('overview');&#10;&#10;  return (&#10;    &lt;div className=&quot;h-screen bg-gray-50 flex flex-col&quot;&gt;&#10;      &lt;Header activeView={activeView} setActiveView={setActiveView} /&gt;&#10;&#10;      &lt;div className=&quot;flex flex-1 overflow-hidden&quot;&gt;&#10;        &lt;Sidebar&#10;          selectedForest={selectedForest}&#10;          setSelectedForest={setSelectedForest}&#10;          activeView={activeView}&#10;        /&gt;&#10;&#10;        &lt;main className=&quot;flex-1 relative&quot;&gt;&#10;          &lt;MapView selectedForest={selectedForest} activeView={activeView} /&gt;&#10;        &lt;/main&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Header.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { Trees, Bell, Settings, User, Search } from 'lucide-react';&#10;import { clsx } from 'clsx';&#10;&#10;interface HeaderProps {&#10;  activeView: 'overview' | 'monitoring' | 'alerts' | 'analytics';&#10;  setActiveView: (view: 'overview' | 'monitoring' | 'alerts' | 'analytics') =&gt; void;&#10;}&#10;&#10;export function Header({ activeView, setActiveView }: HeaderProps) {&#10;  const navItems = [&#10;    { id: 'overview', label: 'Overview', icon: Trees },&#10;    { id: 'monitoring', label: 'Monitoring', icon: Search },&#10;    { id: 'alerts', label: 'Alerts', icon: Bell },&#10;    { id: 'analytics', label: 'Analytics', icon: Settings },&#10;  ] as const;&#10;&#10;  return (&#10;    &lt;header className=&quot;bg-white border-b border-gray-200 px-6 py-4 shadow-sm&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        {/* Logo and Title */}&#10;        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;          &lt;div className=&quot;bg-green-600 p-2 rounded-lg&quot;&gt;&#10;            &lt;Trees className=&quot;h-6 w-6 text-white&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;h1 className=&quot;text-xl font-bold text-gray-900&quot;&gt;Forester&lt;/h1&gt;&#10;            &lt;p className=&quot;text-sm text-gray-500&quot;&gt;Forest Management Portal&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Navigation */}&#10;        &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;          {navItems.map((item) =&gt; {&#10;            const Icon = item.icon;&#10;            return (&#10;              &lt;button&#10;                key={item.id}&#10;                onClick={() =&gt; setActiveView(item.id)}&#10;                className={clsx(&#10;                  'flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors',&#10;                  activeView === item.id&#10;                    ? 'bg-green-100 text-green-700'&#10;                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'&#10;                )}&#10;              &gt;&#10;                &lt;Icon className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;span&gt;{item.label}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            );&#10;          })}&#10;        &lt;/nav&gt;&#10;&#10;        {/* User Profile */}&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;button className=&quot;p-2 text-gray-400 hover:text-gray-600 rounded-md hover:bg-gray-100&quot;&gt;&#10;            &lt;Bell className=&quot;h-5 w-5&quot; /&gt;&#10;          &lt;/button&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;div className=&quot;bg-green-600 p-2 rounded-full&quot;&gt;&#10;              &lt;User className=&quot;h-4 w-4 text-white&quot; /&gt;&#10;            &lt;/div&gt;&#10;            &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;Forest Ranger&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/header&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { Trees, Bell, Settings, User, Search } from 'lucide-react';&#10;import { clsx } from 'clsx';&#10;&#10;// Import JSON data&#10;import navigationData from '@/data/navigation.json';&#10;import userData from '@/data/user.json';&#10;&#10;interface HeaderProps {&#10;  activeView: 'overview' | 'monitoring' | 'alerts' | 'analytics';&#10;  setActiveView: (view: 'overview' | 'monitoring' | 'alerts' | 'analytics') =&gt; void;&#10;}&#10;&#10;export function Header({ activeView, setActiveView }: HeaderProps) {&#10;  const navItems = navigationData.navItems;&#10;&#10;  const getIcon = (iconName: string) =&gt; {&#10;    switch (iconName) {&#10;      case 'Trees':&#10;        return Trees;&#10;      case 'Search':&#10;        return Search;&#10;      case 'Bell':&#10;        return Bell;&#10;      case 'Settings':&#10;        return Settings;&#10;      default:&#10;        return Trees;&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;header className=&quot;bg-white border-b border-gray-200 px-6 py-4 shadow-sm&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        {/* Logo and Title */}&#10;        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;          &lt;div className={`${userData.app.logo.bgColor} p-2 rounded-lg`}&gt;&#10;            &lt;Trees className={`h-6 w-6 ${userData.app.logo.textColor}`} /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;h1 className=&quot;text-xl font-bold text-gray-900&quot;&gt;{userData.app.name}&lt;/h1&gt;&#10;            &lt;p className=&quot;text-sm text-gray-500&quot;&gt;{userData.app.description}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Navigation */}&#10;        &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;          {navItems.map((item) =&gt; {&#10;            const Icon = getIcon(item.icon);&#10;            return (&#10;              &lt;button&#10;                key={item.id}&#10;                onClick={() =&gt; setActiveView(item.id as any)}&#10;                className={clsx(&#10;                  'flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors',&#10;                  activeView === item.id&#10;                    ? 'bg-green-100 text-green-700'&#10;                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'&#10;                )}&#10;              &gt;&#10;                &lt;Icon className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;span&gt;{item.label}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            );&#10;          })}&#10;        &lt;/nav&gt;&#10;&#10;        {/* User Profile */}&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;button className=&quot;p-2 text-gray-400 hover:text-gray-600 rounded-md hover:bg-gray-100&quot;&gt;&#10;            &lt;Bell className=&quot;h-5 w-5&quot; /&gt;&#10;          &lt;/button&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;div className={`${userData.user.avatar.bgColor} p-2 rounded-full`}&gt;&#10;              &lt;User className={`h-4 w-4 ${userData.user.avatar.textColor}`} /&gt;&#10;            &lt;/div&gt;&#10;            &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;{userData.user.name}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/header&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/InteractiveMap.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/InteractiveMap.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useEffect, useState } from 'react';&#10;import { MapContainer, TileLayer, Marker, Popup, Circle, Polygon, useMap } from 'react-leaflet';&#10;import L from 'leaflet';&#10;import 'leaflet/dist/leaflet.css';&#10;import { MapPin, Thermometer, Droplets, Wind, AlertTriangle } from 'lucide-react';&#10;&#10;// Import JSON data&#10;import forestsData from '@/data/forests.json';&#10;import sensorsData from '@/data/sensors.json';&#10;import alertsData from '@/data/alerts.json';&#10;import analyticsData from '@/data/analytics.json';&#10;&#10;// Fix for default markers in Next.js&#10;delete (L.Icon.Default.prototype as any)._getIconUrl;&#10;L.Icon.Default.mergeOptions({&#10;  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',&#10;  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',&#10;  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',&#10;});&#10;&#10;interface InteractiveMapProps {&#10;  selectedForest: string | null;&#10;  activeView: 'overview' | 'monitoring' | 'alerts' | 'analytics';&#10;}&#10;&#10;// Extract forest boundaries from JSON data&#10;const forestBoundaries = forestsData.forests.reduce((acc, forest) =&gt; {&#10;  acc[forest.id] = forest.boundaries;&#10;  return acc;&#10;}, {} as Record&lt;string, number[][]&gt;);&#10;&#10;// Use imported data&#10;const sensors = sensorsData.sensors;&#10;const alerts = alertsData.alerts;&#10;const analyticsZones = analyticsData.analyticsZones;&#10;&#10;// Custom icons for different marker types&#10;const createCustomIcon = (type: string, status?: string) =&gt; {&#10;  const color = status === 'alert' ? '#ef4444' : type === 'sensor' ? '#3b82f6' : '#10b981';&#10;  return L.divIcon({&#10;    html: `&lt;div style=&quot;background-color: ${color}; width: 20px; height: 20px; border-radius: 50%; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.2);&quot;&gt;&lt;/div&gt;`,&#10;    iconSize: [20, 20],&#10;    iconAnchor: [10, 10],&#10;  });&#10;};&#10;&#10;function MapController({ selectedForest }: { selectedForest: string | null }) {&#10;  const map = useMap();&#10;&#10;  useEffect(() =&gt; {&#10;    if (selectedForest &amp;&amp; forestBoundaries[selectedForest as keyof typeof forestBoundaries]) {&#10;      const bounds = forestBoundaries[selectedForest as keyof typeof forestBoundaries];&#10;      map.fitBounds(bounds as L.LatLngBoundsExpression);&#10;    } else {&#10;      // Default view of continental US&#10;      map.setView([39.8283, -98.5795], 4);&#10;    }&#10;  }, [selectedForest, map]);&#10;&#10;  return null;&#10;}&#10;&#10;export default function InteractiveMap({ selectedForest, activeView }: InteractiveMapProps) {&#10;  const [mounted, setMounted] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    setMounted(true);&#10;  }, []);&#10;&#10;  if (!mounted) return null;&#10;&#10;  const getSensorIcon = (type: string) =&gt; {&#10;    switch (type) {&#10;      case 'temperature': return &lt;Thermometer className=&quot;h-4 w-4&quot; /&gt;;&#10;      case 'humidity': return &lt;Droplets className=&quot;h-4 w-4&quot; /&gt;;&#10;      case 'wind': return &lt;Wind className=&quot;h-4 w-4&quot; /&gt;;&#10;      default: return &lt;MapPin className=&quot;h-4 w-4&quot; /&gt;;&#10;    }&#10;  };&#10;&#10;  const getAlertColor = (level: string) =&gt; {&#10;    switch (level) {&#10;      case 'high': return '#ef4444';&#10;      case 'medium': return '#f59e0b';&#10;      case 'low': return '#10b981';&#10;      default: return '#6b7280';&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;MapContainer&#10;      center={[39.8283, -98.5795]}&#10;      zoom={4}&#10;      className=&quot;h-full w-full&quot;&#10;      zoomControl={true}&#10;    &gt;&#10;      &lt;TileLayer&#10;        // attribution='&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors'&#10;        url=&quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;&#10;      /&gt;&#10;&#10;      {/* Satellite layer option */}&#10;      &lt;TileLayer&#10;        // attribution='&amp;copy; &lt;a href=&quot;https://www.esri.com/&quot;&gt;Esri&lt;/a&gt;'&#10;        url=&quot;https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}&quot;&#10;        opacity={0.7}&#10;      /&gt;&#10;&#10;      &lt;MapController selectedForest={selectedForest} /&gt;&#10;&#10;      {/* Forest boundaries */}&#10;      {Object.entries(forestBoundaries).map(([forestId, boundary]) =&gt; (&#10;        &lt;Polygon&#10;          key={forestId}&#10;          positions={boundary as L.LatLngExpression[]}&#10;          pathOptions={{&#10;            color: selectedForest === forestId ? '#10b981' : '#6b7280',&#10;            weight: selectedForest === forestId ? 3 : 2,&#10;            opacity: 0.8,&#10;            fillOpacity: selectedForest === forestId ? 0.2 : 0.1,&#10;          }}&#10;        &gt;&#10;          &lt;Popup&gt;&#10;            &lt;div className=&quot;p-2&quot;&gt;&#10;              &lt;h3 className=&quot;font-semibold capitalize&quot;&gt;{forestId.replace('_', ' ')} National Forest&lt;/h3&gt;&#10;              &lt;p className=&quot;text-sm text-gray-600&quot;&gt;Click to view details&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/Popup&gt;&#10;        &lt;/Polygon&gt;&#10;      ))}&#10;&#10;      {/* Sensors (monitoring view) */}&#10;      {activeView === 'monitoring' &amp;&amp; sensors.map((sensor) =&gt; (&#10;        &lt;Marker&#10;          key={sensor.id}&#10;          position={[sensor.lat, sensor.lng]}&#10;          icon={createCustomIcon('sensor')}&#10;        &gt;&#10;          &lt;Popup&gt;&#10;            &lt;div className=&quot;p-3 min-w-[200px]&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                {getSensorIcon(sensor.type)}&#10;                &lt;h3 className=&quot;font-semibold capitalize&quot;&gt;{sensor.type.replace('_', ' ')} Sensor&lt;/h3&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-1&quot;&gt;&#10;                &lt;p className=&quot;text-lg font-bold text-blue-600&quot;&gt;{sensor.value}&lt;/p&gt;&#10;                &lt;p className=&quot;text-sm text-gray-600&quot;&gt;Status: {sensor.status}&lt;/p&gt;&#10;                &lt;p className=&quot;text-xs text-gray-500&quot;&gt;Last updated: 2 min ago&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/Popup&gt;&#10;        &lt;/Marker&gt;&#10;      ))}&#10;&#10;      {/* Alerts */}&#10;      {activeView === 'alerts' &amp;&amp; alerts.map((alert) =&gt; (&#10;        &lt;Marker&#10;          key={alert.id}&#10;          position={[alert.lat, alert.lng]}&#10;          icon={createCustomIcon('alert', 'alert')}&#10;        &gt;&#10;          &lt;Popup&gt;&#10;            &lt;div className=&quot;p-3 min-w-[250px]&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                &lt;AlertTriangle className=&quot;h-4 w-4 text-red-500&quot; /&gt;&#10;                &lt;h3 className=&quot;font-semibold capitalize&quot;&gt;{alert.type.replace('_', ' ')} Alert&lt;/h3&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;span className=&quot;text-sm font-medium&quot;&gt;Level:&lt;/span&gt;&#10;                  &lt;span&#10;                    className=&quot;px-2 py-1 rounded text-xs font-medium text-white&quot;&#10;                    style={{ backgroundColor: getAlertColor(alert.level) }}&#10;                  &gt;&#10;                    {alert.level.toUpperCase()}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;p className=&quot;text-sm text-gray-700&quot;&gt;{alert.message}&lt;/p&gt;&#10;                &lt;button className=&quot;text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600&quot;&gt;&#10;                  View Details&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/Popup&gt;&#10;        &lt;/Marker&gt;&#10;      ))}&#10;&#10;      {/* Analytics view - heat maps and zones */}&#10;      {activeView === 'analytics' &amp;&amp; (&#10;        &lt;&gt;&#10;          {analyticsZones.map((zone, index) =&gt; (&#10;            &lt;Circle&#10;              key={index}&#10;              center={[zone.lat, zone.lng]}&#10;              radius={zone.radius}&#10;              pathOptions={{ color: '#10b981', fillOpacity: 0.3 }}&#10;            &gt;&#10;              &lt;Popup&gt;&#10;                &lt;div className=&quot;p-2&quot;&gt;&#10;                  &lt;h3 className=&quot;font-semibold&quot;&gt;{zone.name}&lt;/h3&gt;&#10;                  &lt;p className=&quot;text-sm&quot;&gt;{zone.description}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/Popup&gt;&#10;            &lt;/Circle&gt;&#10;          ))}&#10;        &lt;/&gt;&#10;      )}&#10;    &lt;/MapContainer&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useEffect, useState } from 'react';&#10;import { MapContainer, TileLayer, Marker, Popup, Circle, Polygon, useMap } from 'react-leaflet';&#10;import L from 'leaflet';&#10;import 'leaflet/dist/leaflet.css';&#10;import { MapPin, Thermometer, Droplets, Wind, AlertTriangle } from 'lucide-react';&#10;&#10;// Import JSON data&#10;import forestsData from '@/data/forests.json';&#10;import sensorsData from '@/data/sensors.json';&#10;import alertsData from '@/data/alerts.json';&#10;import analyticsData from '@/data/analytics.json';&#10;&#10;// Fix for default markers in Next.js&#10;delete (L.Icon.Default.prototype as any)._getIconUrl;&#10;L.Icon.Default.mergeOptions({&#10;  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',&#10;  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',&#10;  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',&#10;});&#10;&#10;interface InteractiveMapProps {&#10;  selectedForest: string | null;&#10;  activeView: 'overview' | 'monitoring' | 'alerts' | 'analytics';&#10;}&#10;&#10;// Extract forest boundaries from JSON data&#10;const forestBoundaries = forestsData.forests.reduce((acc, forest) =&gt; {&#10;  acc[forest.id] = forest.boundaries;&#10;  return acc;&#10;}, {} as Record&lt;string, number[][]&gt;);&#10;&#10;// Use imported data&#10;const sensors = sensorsData.sensors;&#10;const alerts = alertsData.alerts;&#10;const analyticsZones = analyticsData.analyticsZones;&#10;&#10;// Custom icons for different marker types&#10;const createCustomIcon = (type: string, status?: string) =&gt; {&#10;  const color = status === 'alert' ? '#ef4444' : type === 'sensor' ? '#3b82f6' : '#10b981';&#10;  return L.divIcon({&#10;    html: `&lt;div style=&quot;background-color: ${color}; width: 20px; height: 20px; border-radius: 50%; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.2);&quot;&gt;&lt;/div&gt;`,&#10;    iconSize: [20, 20],&#10;    iconAnchor: [10, 10],&#10;  });&#10;};&#10;&#10;function MapController({ selectedForest }: { selectedForest: string | null }) {&#10;  const map = useMap();&#10;&#10;  useEffect(() =&gt; {&#10;    if (selectedForest &amp;&amp; forestBoundaries[selectedForest as keyof typeof forestBoundaries]) {&#10;      const bounds = forestBoundaries[selectedForest as keyof typeof forestBoundaries];&#10;      map.fitBounds(bounds as L.LatLngBoundsExpression);&#10;    } else {&#10;      // Default view of continental US&#10;      map.setView([39.8283, -98.5795], 4);&#10;    }&#10;  }, [selectedForest, map]);&#10;&#10;  return null;&#10;}&#10;&#10;export default function InteractiveMap({ selectedForest, activeView }: InteractiveMapProps) {&#10;  const [mounted, setMounted] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    setMounted(true);&#10;  }, []);&#10;&#10;  if (!mounted) return null;&#10;&#10;  const getSensorIcon = (type: string) =&gt; {&#10;    switch (type) {&#10;      case 'temperature': return &lt;Thermometer className=&quot;h-4 w-4&quot; /&gt;;&#10;      case 'humidity': return &lt;Droplets className=&quot;h-4 w-4&quot; /&gt;;&#10;      case 'wind': return &lt;Wind className=&quot;h-4 w-4&quot; /&gt;;&#10;      default: return &lt;MapPin className=&quot;h-4 w-4&quot; /&gt;;&#10;    }&#10;  };&#10;&#10;  const getAlertColor = (level: string) =&gt; {&#10;    switch (level) {&#10;      case 'high': return '#ef4444';&#10;      case 'medium': return '#f59e0b';&#10;      case 'low': return '#10b981';&#10;      default: return '#6b7280';&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;MapContainer&#10;      center={[39.8283, -98.5795]}&#10;      zoom={4}&#10;      className=&quot;h-full w-full&quot;&#10;      zoomControl={true}&#10;    &gt;&#10;      &lt;TileLayer&#10;        // attribution='&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors'&#10;        url=&quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;&#10;      /&gt;&#10;&#10;      {/* Satellite layer option */}&#10;      &lt;TileLayer&#10;        // attribution='&amp;copy; &lt;a href=&quot;https://www.esri.com/&quot;&gt;Esri&lt;/a&gt;'&#10;        url=&quot;https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}&quot;&#10;        opacity={0.7}&#10;      /&gt;&#10;&#10;      &lt;MapController selectedForest={selectedForest} /&gt;&#10;&#10;      {/* Forest boundaries */}&#10;      {Object.entries(forestBoundaries).map(([forestId, boundary]) =&gt; (&#10;        &lt;Polygon&#10;          key={forestId}&#10;          positions={boundary as L.LatLngExpression[]}&#10;          pathOptions={{&#10;            color: selectedForest === forestId ? '#10b981' : '#6b7280',&#10;            weight: selectedForest === forestId ? 3 : 2,&#10;            opacity: 0.8,&#10;            fillOpacity: selectedForest === forestId ? 0.2 : 0.1,&#10;          }}&#10;        &gt;&#10;          &lt;Popup&gt;&#10;            &lt;div className=&quot;p-2&quot;&gt;&#10;              &lt;h3 className=&quot;font-semibold capitalize&quot;&gt;{forestId.replace('_', ' ')} National Forest&lt;/h3&gt;&#10;              &lt;p className=&quot;text-sm text-gray-600&quot;&gt;Click to view details&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/Popup&gt;&#10;        &lt;/Polygon&gt;&#10;      ))}&#10;&#10;      {/* Sensors (monitoring view) */}&#10;      {activeView === 'monitoring' &amp;&amp; sensors.map((sensor) =&gt; (&#10;        &lt;Marker&#10;          key={sensor.id}&#10;          position={[sensor.lat, sensor.lng]}&#10;          icon={createCustomIcon('sensor')}&#10;        &gt;&#10;          &lt;Popup&gt;&#10;            &lt;div className=&quot;p-3 min-w-[200px]&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                {getSensorIcon(sensor.type)}&#10;                &lt;h3 className=&quot;font-semibold capitalize&quot;&gt;{sensor.type.replace('_', ' ')} Sensor&lt;/h3&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-1&quot;&gt;&#10;                &lt;p className=&quot;text-lg font-bold text-blue-600&quot;&gt;{sensor.value}&lt;/p&gt;&#10;                &lt;p className=&quot;text-sm text-gray-600&quot;&gt;Status: {sensor.status}&lt;/p&gt;&#10;                &lt;p className=&quot;text-xs text-gray-500&quot;&gt;Last updated: 2 min ago&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/Popup&gt;&#10;        &lt;/Marker&gt;&#10;      ))}&#10;&#10;      {/* Alerts */}&#10;      {activeView === 'alerts' &amp;&amp; alerts.map((alert) =&gt; (&#10;        &lt;Marker&#10;          key={alert.id}&#10;          position={[alert.lat, alert.lng]}&#10;          icon={createCustomIcon('alert', 'alert')}&#10;        &gt;&#10;          &lt;Popup&gt;&#10;            &lt;div className=&quot;p-3 min-w-[250px]&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                &lt;AlertTriangle className=&quot;h-4 w-4 text-red-500&quot; /&gt;&#10;                &lt;h3 className=&quot;font-semibold capitalize&quot;&gt;{alert.type.replace('_', ' ')} Alert&lt;/h3&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;span className=&quot;text-sm font-medium&quot;&gt;Level:&lt;/span&gt;&#10;                  &lt;span&#10;                    className=&quot;px-2 py-1 rounded text-xs font-medium text-white&quot;&#10;                    style={{ backgroundColor: getAlertColor(alert.level) }}&#10;                  &gt;&#10;                    {alert.level.toUpperCase()}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;p className=&quot;text-sm text-gray-700&quot;&gt;{alert.message}&lt;/p&gt;&#10;                &lt;button className=&quot;text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600&quot;&gt;&#10;                  View Details&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/Popup&gt;&#10;        &lt;/Marker&gt;&#10;      ))}&#10;&#10;      {/* Analytics view - heat maps and zones */}&#10;      {activeView === 'analytics' &amp;&amp; (&#10;        &lt;&gt;&#10;          {analyticsZones.map((zone, index) =&gt; (&#10;            &lt;Circle&#10;              key={zone.id}&#10;              center={zone.center as L.LatLngExpression}&#10;              radius={zone.radius}&#10;              pathOptions={{ color: zone.color, fillOpacity: zone.fillOpacity }}&#10;            &gt;&#10;              &lt;Popup&gt;&#10;                &lt;div className=&quot;p-2&quot;&gt;&#10;                  &lt;h3 className=&quot;font-semibold&quot;&gt;{zone.name}&lt;/h3&gt;&#10;                  &lt;p className=&quot;text-sm&quot;&gt;{zone.metrics.description}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/Popup&gt;&#10;            &lt;/Circle&gt;&#10;          ))}&#10;        &lt;/&gt;&#10;      )}&#10;    &lt;/MapContainer&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Sidebar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Sidebar.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { MapPin, Filter, TreePine, Activity, AlertTriangle, TrendingUp } from 'lucide-react';&#10;import { clsx } from 'clsx';&#10;&#10;interface SidebarProps {&#10;  selectedForest: string | null;&#10;  setSelectedForest: (forest: string | null) =&gt; void;&#10;  activeView: 'overview' | 'monitoring' | 'alerts' | 'analytics';&#10;}&#10;&#10;const forests = [&#10;  { id: 'yellowstone', name: 'Yellowstone National Forest', area: '2.2M acres', health: 'excellent' },&#10;  { id: 'olympic', name: 'Olympic National Forest', area: '922K acres', health: 'good' },&#10;  { id: 'sequoia', name: 'Sequoia National Forest', area: '1.2M acres', health: 'warning' },&#10;  { id: 'redwood', name: 'Redwood National Forest', area: '139K acres', health: 'excellent' },&#10;];&#10;&#10;const stats = {&#10;  overview: [&#10;    { label: 'Total Coverage', value: '4.5M acres', icon: TreePine, color: 'green' },&#10;    { label: 'Active Monitoring', value: '342 sensors', icon: Activity, color: 'blue' },&#10;    { label: 'Alerts', value: '12 active', icon: AlertTriangle, color: 'red' },&#10;    { label: 'Health Score', value: '92%', icon: TrendingUp, color: 'green' },&#10;  ],&#10;  monitoring: [&#10;    { label: 'Temperature', value: '22°C', icon: Activity, color: 'blue' },&#10;    { label: 'Humidity', value: '68%', icon: Activity, color: 'green' },&#10;    { label: 'Air Quality', value: 'Good', icon: Activity, color: 'green' },&#10;    { label: 'Wind Speed', value: '12 km/h', icon: Activity, color: 'blue' },&#10;  ],&#10;  alerts: [&#10;    { label: 'Fire Risk', value: 'Medium', icon: AlertTriangle, color: 'orange' },&#10;    { label: 'Deforestation', value: '3 areas', icon: AlertTriangle, color: 'red' },&#10;    { label: 'Pest Activity', value: 'Low', icon: AlertTriangle, color: 'green' },&#10;    { label: 'Equipment', value: '2 offline', icon: AlertTriangle, color: 'red' },&#10;  ],&#10;  analytics: [&#10;    { label: 'Growth Rate', value: '+2.3%', icon: TrendingUp, color: 'green' },&#10;    { label: 'Biodiversity', value: '847 species', icon: TrendingUp, color: 'blue' },&#10;    { label: 'Carbon Capture', value: '12.5K tons', icon: TrendingUp, color: 'green' },&#10;    { label: 'Water Usage', value: '95% efficient', icon: TrendingUp, color: 'blue' },&#10;  ],&#10;};&#10;&#10;export function Sidebar({ selectedForest, setSelectedForest, activeView }: SidebarProps) {&#10;  const [isFilterOpen, setIsFilterOpen] = useState(false);&#10;  &#10;  const currentStats = stats[activeView];&#10;&#10;  const getHealthColor = (health: string) =&gt; {&#10;    switch (health) {&#10;      case 'excellent': return 'bg-green-500';&#10;      case 'good': return 'bg-blue-500';&#10;      case 'warning': return 'bg-yellow-500';&#10;      case 'critical': return 'bg-red-500';&#10;      default: return 'bg-gray-500';&#10;    }&#10;  };&#10;&#10;  const getStatColor = (color: string) =&gt; {&#10;    switch (color) {&#10;      case 'green': return 'text-green-600 bg-green-100';&#10;      case 'blue': return 'text-blue-600 bg-blue-100';&#10;      case 'red': return 'text-red-600 bg-red-100';&#10;      case 'orange': return 'text-orange-600 bg-orange-100';&#10;      default: return 'text-gray-600 bg-gray-100';&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;aside className=&quot;w-80 bg-white border-r border-gray-200 overflow-y-auto&quot;&gt;&#10;      {/* Quick Stats */}&#10;      &lt;div className=&quot;p-6 border-b border-gray-200&quot;&gt;&#10;        &lt;h2 className=&quot;text-lg font-semibold text-gray-900 mb-4 capitalize&quot;&gt;{activeView} Stats&lt;/h2&gt;&#10;        &lt;div className=&quot;space-y-3&quot;&gt;&#10;          {currentStats.map((stat, index) =&gt; {&#10;            const Icon = stat.icon;&#10;            return (&#10;              &lt;div key={index} className=&quot;flex items-center justify-between p-3 rounded-lg bg-gray-50&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                  &lt;div className={clsx('p-2 rounded-md', getStatColor(stat.color))}&gt;&#10;                    &lt;Icon className=&quot;h-4 w-4&quot; /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-900&quot;&gt;{stat.value}&lt;/p&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-500&quot;&gt;{stat.label}&lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            );&#10;          })}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Forest Selection */}&#10;      &lt;div className=&quot;p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900&quot;&gt;Forests&lt;/h3&gt;&#10;          &lt;button&#10;            onClick={() =&gt; setIsFilterOpen(!isFilterOpen)}&#10;            className=&quot;p-2 text-gray-400 hover:text-gray-600 rounded-md hover:bg-gray-100&quot;&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4&quot; /&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {isFilterOpen &amp;&amp; (&#10;          &lt;div className=&quot;mb-4 p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;            &lt;p className=&quot;text-sm text-gray-600&quot;&gt;Filter options would go here&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          {forests.map((forest) =&gt; (&#10;            &lt;button&#10;              key={forest.id}&#10;              onClick={() =&gt; setSelectedForest(forest.id === selectedForest ? null : forest.id)}&#10;              className={clsx(&#10;                'w-full text-left p-4 rounded-lg border transition-colors',&#10;                selectedForest === forest.id&#10;                  ? 'border-green-200 bg-green-50'&#10;                  : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'&#10;              )}&#10;            &gt;&#10;              &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex-1&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900&quot;&gt;{forest.name}&lt;/h4&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-500 mt-1&quot;&gt;{forest.area}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;div className={clsx('w-2 h-2 rounded-full', getHealthColor(forest.health))} /&gt;&#10;                  &lt;MapPin className=&quot;h-4 w-4 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/button&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/aside&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { MapPin, Filter } from 'lucide-react';&#10;import { clsx } from 'clsx';&#10;&#10;// Import JSON data&#10;import forestsData from '@/data/forests.json';&#10;&#10;interface SidebarProps {&#10;  selectedForest: string | null;&#10;  setSelectedForest: (forest: string | null) =&gt; void;&#10;  activeView: 'overview' | 'monitoring' | 'alerts' | 'analytics';&#10;}&#10;&#10;export function Sidebar({ selectedForest, setSelectedForest, activeView }: SidebarProps) {&#10;  const [isFilterOpen, setIsFilterOpen] = useState(false);&#10;  &#10;  const forests = forestsData.forests;&#10;&#10;  const getHealthColor = (health: string) =&gt; {&#10;    switch (health) {&#10;      case 'excellent': return 'bg-green-500';&#10;      case 'good': return 'bg-blue-500';&#10;      case 'warning': return 'bg-yellow-500';&#10;      case 'critical': return 'bg-red-500';&#10;      default: return 'bg-gray-500';&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;aside className=&quot;w-80 bg-white border-r border-gray-200 overflow-y-auto&quot;&gt;&#10;      {/* Forest Selection */}&#10;      &lt;div className=&quot;p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900&quot;&gt;Forests&lt;/h3&gt;&#10;          &lt;button&#10;            onClick={() =&gt; setIsFilterOpen(!isFilterOpen)}&#10;            className=&quot;p-2 text-gray-400 hover:text-gray-600 rounded-md hover:bg-gray-100&quot;&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4&quot; /&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {isFilterOpen &amp;&amp; (&#10;          &lt;div className=&quot;mb-4 p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;            &lt;p className=&quot;text-sm text-gray-600&quot;&gt;Filter options would go here&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          {forests.map((forest) =&gt; (&#10;            &lt;button&#10;              key={forest.id}&#10;              onClick={() =&gt; setSelectedForest(forest.id === selectedForest ? null : forest.id)}&#10;              className={clsx(&#10;                'w-full text-left p-4 rounded-lg border transition-colors',&#10;                selectedForest === forest.id&#10;                  ? 'border-green-200 bg-green-50'&#10;                  : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'&#10;              )}&#10;            &gt;&#10;              &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex-1&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900&quot;&gt;{forest.name}&lt;/h4&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-500 mt-1&quot;&gt;{forest.area}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;div className={clsx('w-2 h-2 rounded-full', getHealthColor(forest.health))} /&gt;&#10;                  &lt;MapPin className=&quot;h-4 w-4 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/button&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/aside&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/data/analytics.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/data/analytics.json" />
              <option name="updatedContent" value="{&#10;  &quot;analyticsZones&quot;: [&#10;    {&#10;      &quot;id&quot;: &quot;high_growth_zone&quot;,&#10;      &quot;name&quot;: &quot;High Growth Zone&quot;,&#10;      &quot;center&quot;: [44.5, -110.3],&#10;      &quot;radius&quot;: 5000,&#10;      &quot;color&quot;: &quot;#10b981&quot;,&#10;      &quot;fillOpacity&quot;: 0.3,&#10;      &quot;metrics&quot;: {&#10;        &quot;growthRate&quot;: &quot;+3.2%&quot;,&#10;        &quot;description&quot;: &quot;High growth rate zone&quot;&#10;      }&#10;    },&#10;    {&#10;      &quot;id&quot;: &quot;monitoring_zone&quot;,&#10;      &quot;name&quot;: &quot;Monitoring Zone&quot;,&#10;      &quot;center&quot;: [47.85, -123.3],&#10;      &quot;radius&quot;: 8000,&#10;      &quot;color&quot;: &quot;#f59e0b&quot;,&#10;      &quot;fillOpacity&quot;: 0.3,&#10;      &quot;metrics&quot;: {&#10;        &quot;status&quot;: &quot;Requires attention&quot;,&#10;        &quot;description&quot;: &quot;Zone requiring special monitoring&quot;&#10;      }&#10;    }&#10;  ],&#10;  &quot;analyticsMetrics&quot;: [&#10;    {&#10;      &quot;name&quot;: &quot;Growth Rate Analysis&quot;,&#10;      &quot;description&quot;: &quot;Forest growth patterns and trends&quot;&#10;    },&#10;    {&#10;      &quot;name&quot;: &quot;Biodiversity Mapping&quot;,&#10;      &quot;description&quot;: &quot;Species distribution and ecosystem health&quot;&#10;    },&#10;    {&#10;      &quot;name&quot;: &quot;Carbon Sequestration&quot;,&#10;      &quot;description&quot;: &quot;Carbon capture efficiency zones&quot;&#10;    }&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/data/navigation.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/data/navigation.json" />
              <option name="updatedContent" value="{&#10;  &quot;navItems&quot;: [&#10;    {&#10;      &quot;id&quot;: &quot;overview&quot;,&#10;      &quot;label&quot;: &quot;Overview&quot;,&#10;      &quot;icon&quot;: &quot;Trees&quot;&#10;    },&#10;    {&#10;      &quot;id&quot;: &quot;monitoring&quot;,&#10;      &quot;label&quot;: &quot;Monitoring&quot;,&#10;      &quot;icon&quot;: &quot;Search&quot;&#10;    },&#10;    {&#10;      &quot;id&quot;: &quot;alerts&quot;,&#10;      &quot;label&quot;: &quot;Alerts&quot;,&#10;      &quot;icon&quot;: &quot;Bell&quot;&#10;    },&#10;    {&#10;      &quot;id&quot;: &quot;analytics&quot;,&#10;      &quot;label&quot;: &quot;Analytics&quot;,&#10;      &quot;icon&quot;: &quot;Settings&quot;&#10;    }&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/data/sensors.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/data/sensors.json" />
              <option name="updatedContent" value="{&#10;  &quot;sensors&quot;: [&#10;    {&#10;      &quot;id&quot;: 1,&#10;      &quot;lat&quot;: 44.5,&#10;      &quot;lng&quot;: -110.3,&#10;      &quot;type&quot;: &quot;temperature&quot;,&#10;      &quot;value&quot;: &quot;22°C&quot;,&#10;      &quot;status&quot;: &quot;normal&quot;,&#10;      &quot;lastUpdated&quot;: &quot;2 min ago&quot;&#10;    },&#10;    {&#10;      &quot;id&quot;: 2,&#10;      &quot;lat&quot;: 44.6,&#10;      &quot;lng&quot;: -110.4,&#10;      &quot;type&quot;: &quot;humidity&quot;,&#10;      &quot;value&quot;: &quot;68%&quot;,&#10;      &quot;status&quot;: &quot;normal&quot;,&#10;      &quot;lastUpdated&quot;: &quot;2 min ago&quot;&#10;    },&#10;    {&#10;      &quot;id&quot;: 3,&#10;      &quot;lat&quot;: 44.45,&#10;      &quot;lng&quot;: -110.35,&#10;      &quot;type&quot;: &quot;air_quality&quot;,&#10;      &quot;value&quot;: &quot;Good&quot;,&#10;      &quot;status&quot;: &quot;normal&quot;,&#10;      &quot;lastUpdated&quot;: &quot;2 min ago&quot;&#10;    },&#10;    {&#10;      &quot;id&quot;: 4,&#10;      &quot;lat&quot;: 44.55,&#10;      &quot;lng&quot;: -110.45,&#10;      &quot;type&quot;: &quot;wind&quot;,&#10;      &quot;value&quot;: &quot;12 km/h&quot;,&#10;      &quot;status&quot;: &quot;normal&quot;,&#10;      &quot;lastUpdated&quot;: &quot;2 min ago&quot;&#10;    }&#10;  ],&#10;  &quot;sensorTypes&quot;: [&#10;    {&#10;      &quot;type&quot;: &quot;temperature&quot;,&#10;      &quot;name&quot;: &quot;Temperature&quot;,&#10;      &quot;unit&quot;: &quot;°C&quot;,&#10;      &quot;icon&quot;: &quot;Thermometer&quot;&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;humidity&quot;,&#10;      &quot;name&quot;: &quot;Humidity&quot;,&#10;      &quot;unit&quot;: &quot;%&quot;,&#10;      &quot;icon&quot;: &quot;Droplets&quot;&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;air_quality&quot;,&#10;      &quot;name&quot;: &quot;Air Quality&quot;,&#10;      &quot;unit&quot;: &quot;AQI&quot;,&#10;      &quot;icon&quot;: &quot;MapPin&quot;&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;wind&quot;,&#10;      &quot;name&quot;: &quot;Wind Speed&quot;,&#10;      &quot;unit&quot;: &quot;km/h&quot;,&#10;      &quot;icon&quot;: &quot;Wind&quot;&#10;    }&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/data/user.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/data/user.json" />
              <option name="updatedContent" value="{&#10;  &quot;user&quot;: {&#10;    &quot;name&quot;: &quot;Forest Ranger&quot;,&#10;    &quot;role&quot;: &quot;Forest Ranger&quot;,&#10;    &quot;avatar&quot;: {&#10;      &quot;type&quot;: &quot;icon&quot;,&#10;      &quot;icon&quot;: &quot;User&quot;,&#10;      &quot;bgColor&quot;: &quot;bg-green-600&quot;,&#10;      &quot;textColor&quot;: &quot;text-white&quot;&#10;    }&#10;  },&#10;  &quot;app&quot;: {&#10;    &quot;name&quot;: &quot;Forester&quot;,&#10;    &quot;description&quot;: &quot;Forest Management Portal&quot;,&#10;    &quot;logo&quot;: {&#10;      &quot;icon&quot;: &quot;Trees&quot;,&#10;      &quot;bgColor&quot;: &quot;bg-green-600&quot;,&#10;      &quot;textColor&quot;: &quot;text-white&quot;&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>